import APIS from "../apis";
import helpers from "../helpers";
import { useRouteStore } from "../store/useRouteStore";
import { IRoute, IApi, IElement } from "../types/routes";
import AutoGeneratedPage from "../pages/AutoGeneratedPage";
import { defer, LoaderFunctionArgs, RouteObject } from "react-router-dom";

interface IRoute_API extends IApi {
  elementId: string;
}

const handleResponseKey = (
  responseKey: string | undefined,
  response: Record<string, unknown>,
) => {
  return responseKey ? response[responseKey] : response;
};

const handleApiHelper = (
  helperKey: keyof typeof helpers | undefined,
  response: any,
) => {
  return helperKey ? helpers[helperKey](response) : response;
};

const handleResponseToProps = (
  responseToProps: Record<string, string>,
  response: any,
) => {
  const dataProps = {} as Record<string, string>;
  Object.keys(responseToProps).forEach((prop) => {
    if (responseToProps[prop] === "*") dataProps[prop] = response;
    else dataProps[prop] = response[responseToProps[prop]];
  });
  return dataProps;
};

const getElementsApis = (elements: Array<IElement>) => {
  const apis: Array<IRoute_API> = [];
  elements.forEach((element) => {
    if (element.children && element.api)
      element.children.forEach(
        (child: IElement) =>
          child.api && apis.push({ ...child.api, elementId: child.id }),
      );
    if (element.api) apis.push({ ...element.api, elementId: element.id });
  });
  return apis;
};

const callRouteApis = (
  apis: Array<IRoute_API>,
  loaderFunctionArgs: LoaderFunctionArgs,
  currentRoute: IRoute,
) => {
  if (!apis.length) return { currentRoute };
  const data = {} as Record<string, unknown>;
  const { params } = loaderFunctionArgs;
  const store_id = params.store_id || "35403";

  apis.forEach((api) => {
    const { responseKey, responseToProps, helperKey } = api;
    const apiData = { ...api.data, ...api.params };

    const apiCall = APIS[api.key]({ ...apiData, store_id } as any)
      .then((response) => handleResponseKey(responseKey, response))
      .then((response) => handleApiHelper(helperKey, response))
      .then((response) => handleResponseToProps(responseToProps, response));

    data[api.elementId] = apiCall;
  });

  return defer({ currentRoute, ...data });
};

export const generateRoutes = (routes: Array<IRoute>) => {
  const router: Array<RouteObject> = [];
  routes.map((route) => {
    router.push({
      path: `${route.path}/:store_id?`,
      element: <AutoGeneratedPage />,
      loader: (loaderParams) => {
        const routes = useRouteStore.getState().routes;
        const currentRoute = routes.find((r) => r.path === route.path) ?? route;
        return callRouteApis(
          getElementsApis(currentRoute.elements),
          loaderParams,
          currentRoute,
        );
      },
    });
  });
  return router;
};
