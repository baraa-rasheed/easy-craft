import { Suspense, useMemo } from "react";
import { Grid, Link, Skeleton, Stack } from "@mui/material";
import {
  Await,
  Link as RouterLink,
  useLoaderData,
  useLocation,
} from "react-router-dom";
import { motion } from "framer-motion";
import ErrorElement from "../components/ErrorElement";
import { IElement, IRoute } from "../types/routes";
import { SIZES, ELEMENT_HEIGHT, SPACING } from "../constants";
import components from "../components";
import { Callout } from "../components/primitives/Callout";
import { RiErrorWarningFill } from "@remixicon/react";

const Header = ({ title }: { title: string }) => {
  return (
    <div className="lg:flex lg:items-center lg:justify-between mb-4">
      <div className="min-w-0 flex-1">
        <h2 className="my-4 text-2xl font-bold  text-black sm:truncate sm:text-3xl sm:tracking-tight">
          {title}
        </h2>
      </div>
    </div>
  );
};

const EmptyPagePlaceHolder = () => {
  const location = useLocation();
  return (
    <Callout
      variant="default"
      className="w-2/4"
      icon={RiErrorWarningFill}
      title="No elements found here :("
    >
      You can navigate to easy-craft to add elements to this page.
      <Link
        color={"inherit"}
        component={RouterLink}
        className="px-2"
        to={`/cms${location.pathname}`}
      >
        Go To easy-craft
      </Link>
    </Callout>
  );
};

const ComponentSkeleton = () => (
  <Skeleton
    height={"100%"}
    animation="wave"
    variant="rounded"
    sx={{ minHeight: ELEMENT_HEIGHT, backgroundColor: "#f1f5f9" }}
  />
);

const RenderComponent = ({
  data,
  element,
}: {
  data: Record<string, any>;
  element: IElement;
}) => {
  if (!element.element) return null;
  const Component = components[element.element];
  if (element.api)
    return (
      <Suspense fallback={<ComponentSkeleton />}>
        <Await
          resolve={data[element.id]}
          errorElement={<ErrorElement {...element} />}
        >
          {(dataProps) => <Component {...element.props} {...dataProps} />}
        </Await>
      </Suspense>
    );
  return <Component {...element.props} />;
};

export default function AutoGeneratedPage() {
  const data = useLoaderData() as { currentRoute: IRoute };

  const renderElements = useMemo(() => {
    return data.currentRoute.elements?.map((element: IElement) => {
      return (
        <Grid item xs={12} key={element.id} lg={SIZES[element.size]}>
          <RenderComponent element={element} data={data} />
        </Grid>
      );
    });
  }, [data]);

  return (
    <motion.div
      initial={{ opacity: 0, translateY: 30 }}
      animate={{ opacity: 1, translateY: 0 }}
      transition={{ duration: 0.4 }}
    >
      <Header title={data.currentRoute.title} />
      <Grid container spacing={SPACING} height={"100%"}>
        {renderElements}
      </Grid>
      {!data.currentRoute?.elements.length && <EmptyPagePlaceHolder />}
    </motion.div>
  );
}
